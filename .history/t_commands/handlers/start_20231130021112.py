import io
import logging
import uuid
from typing import List
import time
import aiofiles
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import (
    BotBlocked,
    UserDeactivated,
    ChatNotFound,
)
from functools import wraps
from keyboards import *
from t_commands.db import *
from t_commands.handlers.select_tarif import TarifStart
from t_commands.ref_system import add_to_queue_ref









button_clicks = {}
sent_messages = {}  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
cooldown_time = 10  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def prevent_double_click(func):
    @wraps(func)
    async def wrapper(callback_query: types.CallbackQuery, state, db):
        user_id = callback_query.from_user.id

        # –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if user_id in button_clicks:
            button_info = button_clicks[user_id]
            if button_info['timestamp'] + cooldown_time > time.time():
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
                await callback_query.answer("–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ :)")
                return
            elif button_info['message_id'] and button_info['message_id'] in sent_messages:
                # –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                await callback_query.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ :)")
                return

        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await func(callback_query, state, db)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–∏–∏
        button_clicks[user_id] = {
            'timestamp': time.time(),
            'message_id': None,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        sent_message_id = callback_query.message.message_id if callback_query.message else None
        if sent_message_id:
            sent_messages[sent_message_id] = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        current_time = time.time()
        for msg_id, timestamp in list(sent_messages.items()):
            if current_time - timestamp > cooldown_time:
                del sent_messages[msg_id]

    return wrapper






class OrderStart(StatesGroup):
    send_start = State()
    send_continue = State()
    send_gender = State()
    send_photo = State()



async def send_start(
    message: types.Message, state: FSMContext, db: asyncpg.pool.Pool
):
    text = """–ü—Ä–∏–≤–µ—Ç ‚úå

–Ø —Å–æ–∑–¥–∞–º –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ —Ç–≤–æ–∏–º —Ñ–æ—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ

–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @ava_dream_news –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è
    """
    try:
        await bot.send_chat_action(message.chat.id, "typing")
        ref_code = uuid.uuid4().hex
        args = message.get_args()
        refferer_code, refferer_id, send_ref = await check_referal_exists(
            args, message.chat.id, db
        )
        is_user_exist = await write_user_to_db(
            message, ref_code, db, refferer_code
        )
        await state.set_state(OrderStart.send_start.state)
        if is_user_exist:
            text = "–°–Ω–æ–≤–∞ —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å :)"
            await message.answer(
                text,
                reply_markup=keyboard_send_start,
            )
            await state.set_state(OrderStart.send_photo.state)
        else:
            async with aiofiles.open(
                "images/photo_start.jpg", mode="rb"
            ) as photo:
                await message.answer_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=keyboard_send_start,
                )
            await state.set_state(OrderStart.send_continue.state)    
        if refferer_code and send_ref:
            await add_to_queue_ref(
                refferer_id, "image_for_referal", COUNT_PHOTO_FOR_REFERAL, db
            )
    except (UserDeactivated, ChatNotFound, BotBlocked) as e:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id: {message.chat.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")


async def send_continue(
    call: types.CallbackQuery, state: FSMContext, db: asyncpg.pool.Pool
):
    print('send_continue')
    try:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–µ–Ω–¥–µ—Ä"

        if call.data.lower() != "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª":
            await call.message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∏–∂–µ üëáüèº"
            )
            return
        await call.message.answer(text, reply_markup=keyboard_select_gender)
        await state.set_state(OrderStart.send_continue.state)
    except (UserDeactivated, ChatNotFound, BotBlocked) as e:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id: {call.message.chat.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

@dp.callback_query_handler(state=OrderStart.send_continue)
@prevent_double_click
async def send_gender(
    call: types.CallbackQuery, state: FSMContext, db: asyncpg.pool.Pool
):
    print('send_gender')
    image_count = await get_user_image_count(call.message, db)
    if image_count >= 1:
        await state.set_state(TarifStart.send_select_tarif.state)
        await click_continue(call, state, db)
        return
    if call.data.lower() not in ("üö∫ –∂–µ–Ω—Å–∫–∏–π", "üöπ –º—É–∂—Å–∫–æ–π"):
        await call.message.answer(
            (
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –ø–æ–ª, "
                "–Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëáüèº"
            ),
            reply_markup=keyboard_select_gender,
        )

        return
    if call.data.lower() == "üö∫ –∂–µ–Ω—Å–∫–∏–π":
        await user_update_gender(call.message.chat.id, "female", db)
    else:
        await user_update_gender(call.message.chat.id, "male", db)
    text = """–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
üëç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:
- –ß–µ—Ç–∫–∞—è, –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ–ª—Ñ–∏
- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ —Å–µ–ª—Ñ–∏ —Å –æ–¥–Ω–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º

üëé –ö–∞–∫–∏–µ —Ñ–æ—Ç–æ –Ω–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∂–∞—Ç—å:
- –ì—Ä—É–ø–ø–æ–≤–æ–µ —Ñ–æ—Ç–æ
- –ñ–∏–≤–æ—Ç–Ω—ã—Ö
- –î–µ—Ç–µ–π –¥–æ 18 –ª–µ—Ç
- –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç
- –û–±–Ω–∞–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
- –í —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã—Ö –æ—á–∫–∞—Ö
- –§–æ—Ç–æ, –≥–¥–µ –ª–∏—Ü–æ –∑–∞–∫—Ä—ã—Ç–æ –ª—é–±—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
- –ù–µ—á–µ—Ç–∫–∏–µ –∏ —Å–º–∞–∑–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
- –í–∏–¥–µ–æ –∏ "–∫—Ä—É–∂–æ—á–∫–∏"
- –§–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è

–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∏ 1 —Ñ–æ—Ç–æ
    """
    async with aiofiles.open("images/send_photo.jpg", mode="rb") as photo:
        await call.message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=types.ReplyKeyboardRemove(),
        )
        print(call.message.content_type)
        
    await state.set_state(OrderStart.send_gender.state)
    

async def send_photo_group(
    message: types.Message,
    album: List[types.Message],
    state: FSMContext,
    db: asyncpg.pool.Pool,
):
    print('photo_group')
    image_count = await get_user_image_count(message, db)
    if (
        message.content_type == "text"
        and message.text.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª"
    ):
        if image_count == 0:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
            )
        await click_continue(message, state, db)
    if message.content_type != "photo":
        if image_count == 0:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
            )
        text = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª¬ª
        """
        await message.answer(text, reply_markup=keyboard_send_start)
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª")
    keyboard.add(button_1)
    if image_count >= 1:
        await message.answer(
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëáüèº", reply_markup=keyboard
        )
        await state.set_state(OrderStart.send_photo.state)
        return
    last_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... ‚è≥")
    image_path_list = []
    for id, message_photo in enumerate(album):
        if message_photo.content_type != "photo":
            continue
        photo = io.BytesIO()
        await message_photo.photo[-1].download(destination_file=photo)
        photo.seek(0)
        new_file_path = (
            f"images/{message.from_id}/photos/{uuid.uuid4().hex}.jpg"
        )

        image_count += 1
        try:
            await MINIO_CLIENT.put_object(
                "shawa", new_file_path, photo, len(photo.getvalue())
            )
        except Exception as e:
            logging.error(
                "–û—à–∏–±–∫–∞ –≤ send_settings_photo_group MINIO_CLIENT.get_object",
                e,
            )
        image_path_list.append(new_file_path)
    image_path_str = ";;".join(image_path_list)
    await add_to_check_user_image_queue(
        message, USER_IMAGES_CHECK_PACK, image_path_str, db
    )

async def send_photo(
    message: types.Message, state: FSMContext, db: asyncpg.pool.Pool
):
    print('photo')
    image_count = await get_user_image_count(message, db)
    if (
        message.content_type == "text"
        and message.text.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª"
    ):
        if image_count == 0:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
            )
        await click_continue(message, state, db)
        return

    if message.content_type != "photo":
        if image_count == 0:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
            )
            return
        text = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª¬ª
        """
        await message.answer(text, reply_markup=keyboard_send_start)
        return

    if image_count >= 1:
        await message.answer(
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëáüèº",
            reply_markup=keyboard_send_start,
        )
        await state.set_state(OrderStart.send_photo.state)
        return
    last_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... ‚è≥")
    photo = io.BytesIO()
    await message.photo[-1].download(destination_file=photo)
    photo.seek(0)
    new_file_path = f"images/{message.from_id}/photos/{uuid.uuid4().hex}.jpg"

    try:
        await MINIO_CLIENT.put_object(
            "shawa", new_file_path, photo, len(photo.getvalue())
        )
    except Exception as e:
        logging.error(
            "–û—à–∏–±–∫–∞ –≤ send_photo MINIO_CLIENT.get_object",
            e,
        )
    await add_to_check_user_image_queue(
        message, USER_IMAGE_CHECK, new_file_path, db
    )


@dp.callback_query_handler(state=OrderStart.send_continue)
@prevent_double_click
async def click_continue(
    call: types.CallbackQuery, state: FSMContext, db: asyncpg.pool.Pool
):
    print('click_continue')
    if (
        call.data.lower() != "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª"
    ) and call.data.lower() not in ("üö∫ –∂–µ–Ω—Å–∫–∏–π", "üöπ –º—É–∂—Å–∫–æ–π"):
        await call.message.answer(
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëáüèº",
            reply_markup=keyboard_select_tarif1,
        )
        return
    if_use_free_tarif = await check_if_use_free_tarif(call, db)
    keyboard = (
        keyboard_select_tarif2 if if_use_free_tarif else keyboard_select_tarif1
    )
    photo_tarif = (
        "images/photo_tarif_2.png"
        if if_use_free_tarif
        else "images/photo_tarif.png"
    )
    async with aiofiles.open(photo_tarif, mode="rb") as photo:
        await call.message.answer_photo(
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ ‚òùÔ∏è",
            reply_markup=keyboard,
        )
    await state.set_state(TarifStart.send_select_tarif.state)


async def cmd_cancel(
    message: types.Message, state: FSMContext, db: asyncpg.pool.Pool
):
    await state.finish()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove()
    )


def register_handler_start(dp: Dispatcher):
    dp.register_message_handler(send_start, commands="start", state="*")
    dp.register_callback_query_handler(send_continue, state=OrderStart.send_start)
    dp.register_callback_query_handler(send_gender, state=OrderStart.send_continue)
    dp.register_message_handler(
        send_photo_group,
        is_media_group=True,
        content_types=["photo", "document", "text"],
        state=OrderStart.send_gender,
    )
    dp.register_message_handler(
        send_photo,
        content_types=["photo", "document", "text"],
        state=OrderStart.send_gender,
    )

    dp.register_callback_query_handler(
        click_continue,
        state=OrderStart.send_photo,
    )
    dp.register_message_handler(cmd_cancel, commands="cancel", state="*")
    dp.register_message_handler(
        cmd_cancel, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*"
    )
