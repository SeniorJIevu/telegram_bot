import io
import logging
import uuid
from typing import List
from aiogram.types import ContentType
import aiofiles
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import (
    BotBlocked,
    UserDeactivated,
    ChatNotFound,
)
from aiogram.dispatcher.filters import ContentTypeFilter
from keyboards import *
from t_commands.db import *
from t_commands.handlers.select_tarif import TarifStart
from t_commands.ref_system import add_to_queue_ref


class OrderStart(StatesGroup):
    send_start = State()
    send_continue = State()
    send_gender = State()
    send_photo = State()




@dp.message_handler(commands=['start'], )
async def start(message: types.Message, state: FSMContext,  db: asyncpg.pool.Pool):
    print('–†–∞–±–æ—Ç–∞–µ—Ç')
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    button1 = types.InlineKeyboardButton(text="–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç!", callback_data='–ù–∞—á–∞—Ç—å')
    button2 = types.InlineKeyboardButton(text="–ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç!", callback_data='–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ')
    keyboard.add(button1, button2)
    text="""
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç!
        """
    async with aiofiles.open("images/confirm_age.png", mode="rb") as photo:
        await message.answer_photo(
            reply_markup=keyboard, 
            photo=photo,
            caption=text,
        )
        
        await OrderStart.send_start.set()



@dp.callback_query_handler(lambda call: call.data == "–ù–∞—á–∞—Ç—å", state=OrderStart.send_start)
async def handle_start(message: types.Message, state: FSMContext, db: asyncpg.pool.Pool):
    text = """
        –í–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!
    """
    await message.message.answer(text)
    await send_start(message, state, db)
    



@dp.callback_query_handler(lambda call: call.data == "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", state=OrderStart.send_start)
async def handle_start(message: types.Message, state: FSMContext, db: asyncpg.pool.Pool):
    text = """
        –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞–∂–º–∏—Ç–µ /start
    """
    await message.message.answer(text)
    await state.reset_state()
    await message.message.delete()






async def send_start(
    call: types.CallbackQuery, state: FSMContext, db: asyncpg.pool.Pool
):
    text = """–ü—Ä–∏–≤–µ—Ç ‚úå

–Ø —Å–æ–∑–¥–∞–º –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ —Ç–≤–æ–∏–º —Ñ–æ—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ

–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @ava_dream_news –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è
    """
    try:
        await bot.send_chat_action(call.message.chat.id, "typing")
        ref_code = uuid.uuid4().hex
        args = call.message.get_args()
        refferer_code, refferer_id, send_ref = await check_referal_exists(
            args, call.message.chat.id, db
        )
        is_user_exist = await write_user_to_db(
            call.message, ref_code, db, refferer_code
        )
        await state.set_state(OrderStart.send_start.state)
        if is_user_exist:
            text = "–°–Ω–æ–≤–∞ —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å :)"
            await call.message.answer(
                text,
                reply_markup=keyboard_send_start,
            )
            await state.set_state(OrderStart.send_photo.state)
        else:
            async with aiofiles.open(
                "images/photo_start.jpg", mode="rb"
            ) as photo:
                await call.message.answer_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=keyboard_send_start,
                )
            await state.set_state(OrderStart.send_continue.state)    
        if refferer_code and send_ref:
            await add_to_queue_ref(
                refferer_id, "image_for_referal", COUNT_PHOTO_FOR_REFERAL, db
            )
    except (UserDeactivated, ChatNotFound, BotBlocked) as e:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id: {call.message.chat.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")


async def send_continue(
    call: types.CallbackQuery, state: FSMContext, db: asyncpg.pool.Pool
):
    print('send_continue')
    try:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–µ–Ω–¥–µ—Ä"

        if call.data.lower() != "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª":
            await call.message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∏–∂–µ üëáüèº"
            )
            return
        await call.message.answer(text, reply_markup=keyboard_select_gender)
        await state.set_state(OrderStart.send_continue.state)
    except (UserDeactivated, ChatNotFound, BotBlocked) as e:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id: {call.message.chat.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

@dp.callback_query_handler(state=OrderStart.send_continue)
async def send_gender(
    call: types.CallbackQuery, state: FSMContext, db: asyncpg.pool.Pool
):
    print('send_gender')
    image_count = await get_user_image_count(call.message, db)
    if image_count >= 1:
        await state.set_state(TarifStart.send_select_tarif.state)
        await click_continue(call, state, db)
        return
    if call.data.lower() not in ("üö∫ –∂–µ–Ω—Å–∫–∏–π", "üöπ –º—É–∂—Å–∫–æ–π"):
        await call.message.answer(
            (
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –ø–æ–ª, "
                "–Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëáüèº"
            ),
            reply_markup=keyboard_select_gender,
        )

        return
    if call.data.lower() == "üö∫ –∂–µ–Ω—Å–∫–∏–π":
        await user_update_gender(call.message.chat.id, "female", db)
    else:
        await user_update_gender(call.message.chat.id, "male", db)
    text = """–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
üëç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:
- –ß–µ—Ç–∫–∞—è, –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ–ª—Ñ–∏
- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ —Å–µ–ª—Ñ–∏ —Å –æ–¥–Ω–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º

üëé –ö–∞–∫–∏–µ —Ñ–æ—Ç–æ –Ω–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∂–∞—Ç—å:
- –ì—Ä—É–ø–ø–æ–≤–æ–µ —Ñ–æ—Ç–æ
- –ñ–∏–≤–æ—Ç–Ω—ã—Ö
- –î–µ—Ç–µ–π –¥–æ 18 –ª–µ—Ç
- –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç
- –û–±–Ω–∞–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
- –í —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã—Ö –æ—á–∫–∞—Ö
- –§–æ—Ç–æ, –≥–¥–µ –ª–∏—Ü–æ –∑–∞–∫—Ä—ã—Ç–æ –ª—é–±—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
- –ù–µ—á–µ—Ç–∫–∏–µ –∏ —Å–º–∞–∑–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
- –í–∏–¥–µ–æ –∏ "–∫—Ä—É–∂–æ—á–∫–∏"
- –§–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è

–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∏ 1 —Ñ–æ—Ç–æ
    """
    async with aiofiles.open("images/send_photo.jpg", mode="rb") as photo:
        await call.message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=types.ReplyKeyboardRemove(),
        )
        print(call.message.content_type)
        
    await state.set_state(OrderStart.send_gender.state)
    

async def send_photo_group(
    message: types.Message,
    album: List[types.Message],
    state: FSMContext,
    db: asyncpg.pool.Pool,
):
    print('photo_group')
    image_count = await get_user_image_count(message, db)
    if (
        message.content_type == "text"
        and message.text.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª"
    ):
        if image_count == 0:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
            )
        await click_continue(message, state, db)
    if message.content_type != "photo":
        if image_count == 0:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
            )
        text = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª¬ª
        """
        await message.answer(text, reply_markup=keyboard_send_start)
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª")
    keyboard.add(button_1)
    if image_count >= 1:
        await message.answer(
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëáüèº", reply_markup=keyboard
        )
        await state.set_state(OrderStart.send_photo.state)
        return
    last_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... ‚è≥")
    image_path_list = []
    for id, message_photo in enumerate(album):
        if message_photo.content_type != "photo":
            continue
        photo = io.BytesIO()
        await message_photo.photo[-1].download(destination_file=photo)
        photo.seek(0)
        new_file_path = (
            f"images/{message.from_id}/photos/{uuid.uuid4().hex}.jpg"
        )

        image_count += 1
        try:
            await MINIO_CLIENT.put_object(
                "shawa", new_file_path, photo, len(photo.getvalue())
            )
        except Exception as e:
            logging.error(
                "–û—à–∏–±–∫–∞ –≤ send_settings_photo_group MINIO_CLIENT.get_object",
                e,
            )
        image_path_list.append(new_file_path)
    image_path_str = ";;".join(image_path_list)
    await add_to_check_user_image_queue(
        message, USER_IMAGES_CHECK_PACK, image_path_str, db
    )

async def send_photo(
    message: types.Message, state: FSMContext, db: asyncpg.pool.Pool
):
    print('photo')
    image_count = await get_user_image_count(message, db)
    if (
        message.content_type == "text"
        and message.text.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª"
    ):
        if image_count == 0:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
            )
        await click_continue(message, state, db)
        return

    if message.content_type != "photo":
        if image_count == 0:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
            )
            return
        text = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª¬ª
        """
        await message.answer(text, reply_markup=keyboard_send_start)
        return

    if image_count >= 1:
        await message.answer(
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëáüèº",
            reply_markup=keyboard_send_start,
        )
        await state.set_state(OrderStart.send_photo.state)
        return
    last_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... ‚è≥")
    photo = io.BytesIO()
    await message.photo[-1].download(destination_file=photo)
    photo.seek(0)
    new_file_path = f"images/{message.from_id}/photos/{uuid.uuid4().hex}.jpg"

    try:
        await MINIO_CLIENT.put_object(
            "shawa", new_file_path, photo, len(photo.getvalue())
        )
    except Exception as e:
        logging.error(
            "–û—à–∏–±–∫–∞ –≤ send_photo MINIO_CLIENT.get_object",
            e,
        )
    await add_to_check_user_image_queue(
        message, USER_IMAGE_CHECK, new_file_path, db
    )


@dp.callback_query_handler(state=OrderStart.send_continue)
async def click_continue(
    call: types.CallbackQuery, state: FSMContext, db: asyncpg.pool.Pool
):
    print('click_continue')
    if (
        call.data.lower() != "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâüèª"
    ) and call.data.lower() not in ("üö∫ –∂–µ–Ω—Å–∫–∏–π", "üöπ –º—É–∂—Å–∫–æ–π"):
        await call.message.answer(
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëáüèº",
            reply_markup=keyboard_select_tarif1,
        )
        return
    keyboard = (
        keyboard_select_tarif2 
    )
    photo_tarif = (
        "images/photo_tarif_2.png"
    )
    async with aiofiles.open(photo_tarif, mode="rb") as photo:
        await call.message.answer_photo(
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ ‚òùÔ∏è",
            reply_markup=keyboard,
        )
    await state.set_state(TarifStart.send_select_tarif.state)


async def cmd_cancel(
    message: types.Message, state: FSMContext, db: asyncpg.pool.Pool
):
    await state.finish()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove()
    )


def register_handler_start(dp: Dispatcher):
    dp.register_message_handler(start, commands="start", state="*")

    dp.register_callback_query_handler(send_continue, ContentTypeFilter(content_types=[ContentType.ANY]), NoSpamFilter(), state=OrderStart.send_start )
    dp.register_callback_query_handler(send_gender, state=OrderStart.send_continue)
    dp.register_message_handler(
        send_photo_group,
        is_media_group=True,
        content_types=["photo", "document", "text"],
        state=OrderStart.send_gender,
    )
    dp.register_message_handler(
        send_photo,
        content_types=["photo", "document", "text"],
        state=OrderStart.send_gender,
    )

    dp.register_callback_query_handler(
        click_continue,
        state=OrderStart.send_photo,
    )
    dp.register_message_handler(cmd_cancel, commands="cancel", state="*")
    dp.register_message_handler(
        cmd_cancel, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*"
    )
